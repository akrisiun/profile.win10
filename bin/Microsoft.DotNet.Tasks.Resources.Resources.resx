<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BuildTimedOut" xml:space="preserve">
    <value>Timed out waiting for build to complete in the design time host"</value>
  </data>
  <data name="CannotFindDotNetSDKVersionUnderPath" xml:space="preserve">
    <value>error: The project is configured to use .NET Core SDK version {0} which is not installed or cannot be found under the path {1}. These components are required to build and run this project. Download the version of .NET Core SDK specified in global.json or update the SDK version in global.json to the version that is installed.</value>
  </data>
  <data name="DesignTimeHostNotSupported" xml:space="preserve">
    <value>The DNX SDK version being targeted is not supported by this version of Visual Studio.</value>
  </data>
  <data name="ProjectFileShouldBeSpecified" xml:space="preserve">
    <value>ProjectFullPath parameter can not be null or empty, please specify a valid project file path</value>
  </data>
  <data name="BuildDesignTimeHostConnectionError" xml:space="preserve">
    <value>Cannot connect to the design time host to perform the build. The following socket exception occurred: {0}</value>
  </data>
  <data name="UnknownSDKToolingIdentifier" xml:space="preserve">
    <value>The SDKToolingIdentifier is not recognized. Expected 'DNX' or 'DotNetCore', but was passed {0}.</value>
  </data>
  <data name="BuildWarnings" xml:space="preserve">
    <value>{0,10} Warning(s).</value>
  </data>
  <data name="CannotFindDotNetSDKUnderPath" xml:space="preserve">
    <value>error: The .NET Core SDK is not installed or cannot be found under the path {0}. These components are required to build and run this project. Download the version of .NET Core SDK specified in global.json or update the SDK version in global.json to the version that is installed.</value>
  </data>
  <data name="BuildSucceeded" xml:space="preserve">
    <value>
Build succeeded.</value>
  </data>
  <data name="BuildCanceled" xml:space="preserve">
    <value>
Build canceled by user.</value>
  </data>
  <data name="BuildTimeElapsed" xml:space="preserve">
    <value>
Time elapsed {0}
</value>
  </data>
  <data name="BuildDesignTimeError" xml:space="preserve">
    <value>The design time host build failed with the following error: {0}</value>
  </data>
  <data name="CannotFindDnxPackage" xml:space="preserve">
    <value>Cannot find DNX runtime {0} in the folder: {1}</value>
  </data>
  <data name="DependingProjectFileShouldBeSpecified" xml:space="preserve">
    <value>DependingProjectFullPath parameter can not be null or empty, please specify valid project file path</value>
  </data>
  <data name="OutDirCannotBeEmpty" xml:space="preserve">
    <value>Output directory cannot be empty</value>
  </data>
  <data name="ProjectTargetFrameworkVersionShouldBeSpecified" xml:space="preserve">
    <value>If project {0} has project.json file, make sure there is a valid framework target in it and NuGet restore was executed. If project does not have project.json file, make sure it's msbuild project file contains a valid non-empty TargetFrameworkMoniker property.</value>
  </data>
  <data name="ProjectDirectoryCannotBeEmpty" xml:space="preserve">
    <value>Project directory cannot be empty</value>
  </data>
  <data name="ProjectJsonFileNotFound" xml:space="preserve">
    <value>Project file does not exists in project folder '{0}'</value>
  </data>
  <data name="NoInstalledDnxPackages" xml:space="preserve">
    <value>A DNX runtime has not been installed.</value>
  </data>
  <data name="EnvironmentVariablesTitle" xml:space="preserve">
    <value>Environment variables:</value>
  </data>
  <data name="CannotFindDotNetSDKVersion" xml:space="preserve">
    <value>error: The project is configured to use .NET Core SDK version {0} which is not installed or cannot be found. These components are required to build and run this project. Download the version of .NET Core SDK specified in global.json or update the SDK version in global.json to the version that is installed.</value>
  </data>
  <data name="UnknownDnuCommand" xml:space="preserve">
    <value>Unknown dnu command: {0}</value>
  </data>
  <data name="FailedToGeneratFragmentLockFile" xml:space="preserve">
    <value>Failed to generate fragment lock file {0}, make sure it is not locked by other process: {1}.</value>
  </data>
  <data name="CannotFindDotNetSDK" xml:space="preserve">
    <value>error: The .NET Core SDK is not installed or cannot be found. These components are required to build and run this project.</value>
  </data>
  <data name="BuildErrors" xml:space="preserve">
    <value>{0,10} Error(s).</value>
  </data>
  <data name="BuildFailed" xml:space="preserve">
    <value>
Build failed.</value>
  </data>
  <data name="ProjectNameCannotBeEmpty" xml:space="preserve">
    <value>Project name cannot be empty</value>
  </data>
  <data name="DotNetSdkNotInstalled" xml:space="preserve">
    <value>The .NET Core SDK has not been installed.</value>
  </data>
</root>